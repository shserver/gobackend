// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/public_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicServiceClient is the client API for PublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicServiceClient interface {
	// get: "/public/counsel"
	Counsel(ctx context.Context, opts ...grpc.CallOption) (PublicService_CounselClient, error)
}

type publicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicServiceClient(cc grpc.ClientConnInterface) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) Counsel(ctx context.Context, opts ...grpc.CallOption) (PublicService_CounselClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[0], "/sehyoung.pb.PublicService/Counsel", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceCounselClient{stream}
	return x, nil
}

type PublicService_CounselClient interface {
	Send(*RequestCounsel) error
	Recv() (*ResponseCounsel, error)
	grpc.ClientStream
}

type publicServiceCounselClient struct {
	grpc.ClientStream
}

func (x *publicServiceCounselClient) Send(m *RequestCounsel) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceCounselClient) Recv() (*ResponseCounsel, error) {
	m := new(ResponseCounsel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublicServiceServer is the server API for PublicService service.
// All implementations should embed UnimplementedPublicServiceServer
// for forward compatibility
type PublicServiceServer interface {
	// get: "/public/counsel"
	Counsel(PublicService_CounselServer) error
}

// UnimplementedPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublicServiceServer struct {
}

func (UnimplementedPublicServiceServer) Counsel(PublicService_CounselServer) error {
	return status.Errorf(codes.Unimplemented, "method Counsel not implemented")
}

// UnsafePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServiceServer will
// result in compilation errors.
type UnsafePublicServiceServer interface {
	mustEmbedUnimplementedPublicServiceServer()
}

func RegisterPublicServiceServer(s grpc.ServiceRegistrar, srv PublicServiceServer) {
	s.RegisterService(&PublicService_ServiceDesc, srv)
}

func _PublicService_Counsel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).Counsel(&publicServiceCounselServer{stream})
}

type PublicService_CounselServer interface {
	Send(*ResponseCounsel) error
	Recv() (*RequestCounsel, error)
	grpc.ServerStream
}

type publicServiceCounselServer struct {
	grpc.ServerStream
}

func (x *publicServiceCounselServer) Send(m *ResponseCounsel) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceCounselServer) Recv() (*RequestCounsel, error) {
	m := new(RequestCounsel)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublicService_ServiceDesc is the grpc.ServiceDesc for PublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sehyoung.pb.PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Counsel",
			Handler:       _PublicService_Counsel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/public_service.proto",
}
